/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import accesoADatos.DietaComidaData;
import accesoADatos.DietaData;
import accesoADatos.PacienteData;
import entidades.Dieta;
import entidades.Paciente;
import java.time.LocalDate;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class PacienteInforme extends javax.swing.JInternalFrame {

    static PacienteData pD = new PacienteData();
    static DietaComidaData dCD = new DietaComidaData();
    static DietaData dD = new DietaData();

    private DefaultTableModel modelo = new DefaultTableModel() {
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };
    
    public PacienteInforme() {
        initComponents();
        cargarCabeceras();
    }

    private void cargarCabeceras() {
        modelo.addColumn("Nombre");
        modelo.addColumn("DNI");
        modelo.addColumn("Telefono");
        modelo.addColumn("Estado");
        modelo.addColumn("Fecha Inicio");
        modelo.addColumn("Fecha Final");
        modelo.addColumn("Nombre Dieta");
        jTPInforme.setModel(modelo);
    }

    public void borrarFilas() {

        int f = jTPInforme.getRowCount() - 1;
        for (; f >= 0; f--) {
            modelo.removeRow(f);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTPInforme = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jRBPacienteE = new javax.swing.JRadioButton();
        jRBPacientesS = new javax.swing.JRadioButton();
        jRBPacientesP = new javax.swing.JRadioButton();
        jRBInactivos = new javax.swing.JRadioButton();
        jLTotal = new javax.swing.JLabel();
        jBSalir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBorder(null);

        jTPInforme.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTPInforme.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jTPInforme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTPInformeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTPInforme);

        jRBPacienteE.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        jRBPacienteE.setText("Exitosos");
        jRBPacienteE.setBorder(null);
        jRBPacienteE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBPacienteEActionPerformed(evt);
            }
        });

        jRBPacientesS.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        jRBPacientesS.setText("Sin Exito");
        jRBPacientesS.setBorder(null);
        jRBPacientesS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBPacientesSActionPerformed(evt);
            }
        });

        jRBPacientesP.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        jRBPacientesP.setText("En Progreso");
        jRBPacientesP.setBorder(null);
        jRBPacientesP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBPacientesPActionPerformed(evt);
            }
        });

        jRBInactivos.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        jRBInactivos.setText("Inactivos");
        jRBInactivos.setBorder(null);
        jRBInactivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBInactivosActionPerformed(evt);
            }
        });

        jLTotal.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        jLTotal.setText("Total: ?");

        jBSalir.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBSalir.setText("X");
        jBSalir.setBorder(null);
        jBSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBSalir.setFocusPainted(false);
        jBSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBSalirMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBSalirMouseExited(evt);
            }
        });
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        jLabel2.setText("Informe de Paciente");

        jLabel3.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        jLabel3.setText("Paciente:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(23, 23, 23)
                        .addComponent(jRBPacienteE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRBPacientesS)
                        .addGap(9, 9, 9)
                        .addComponent(jRBPacientesP)
                        .addGap(7, 7, 7)
                        .addComponent(jRBInactivos)
                        .addGap(188, 188, 188)
                        .addComponent(jLTotal))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(165, 165, 165)
                .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jRBPacienteE)
                    .addComponent(jRBPacientesS)
                    .addComponent(jRBPacientesP)
                    .addComponent(jRBInactivos)
                    .addComponent(jLTotal))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRBPacienteEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBPacienteEActionPerformed
        try {
            borrarFilas();
            //Setea el otro radio en falso
            jRBPacientesS.setSelected(false);
            jRBPacientesP.setSelected(false);
            jRBInactivos.setSelected(false);
            //Iterar sobre pacientes exitosos
            List<Paciente> pExitosos = dCD.listarPacientesExitosos();
            for (Paciente pExitoso : pExitosos ) {
                //Obtener la dieta exitosa de cada paciente
                Dieta dieta = dD.buscarDietaXPaciente(pExitoso.getIdPaciente());
                //
                modelo.addRow(new Object[]{pExitoso.getNombre(), pExitoso.getDni(), pExitoso.getTelefono(), dD.buscarDietaXPaciente(pExitoso.getIdPaciente()).finalizado() ? "En progreso" : "Finalizado", dieta.getFechaInicial(), dieta.getFechaFinal(), dieta.getNombre()});
            }
            jLTotal.setText("Total: " + dCD.listarPacientesExitosos().size());
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "No se pudo cargar la tabla");
        }

    }//GEN-LAST:event_jRBPacienteEActionPerformed

    private void jRBPacientesSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBPacientesSActionPerformed
        try {
            borrarFilas();
            jRBPacienteE.setSelected(false);
            jRBPacientesP.setSelected(false);
            jRBInactivos.setSelected(false);
            for (Paciente pSExito : dCD.listarPacientesSinExito()) {
                Dieta dieta = dD.buscarDietaXPaciente(pSExito.getIdPaciente());
                modelo.addRow(new Object[]{pSExito.getNombre(), pSExito.getDni(), pSExito.getTelefono(), dD.buscarDietaXPaciente(pSExito.getIdPaciente()).finalizado() ? "En progreso" : "Finalizado", dieta.getFechaInicial(), dieta.getFechaFinal(),  dieta.getNombre()});
            }
            jLTotal.setText("Total: " + dCD.listarPacientesSinExito().size());
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "No se pudo cargar la tabla");
        }
    }//GEN-LAST:event_jRBPacientesSActionPerformed

    private void jRBPacientesPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBPacientesPActionPerformed
        try {
            borrarFilas();
            jRBPacienteE.setSelected(false);
            jRBPacientesS.setSelected(false);
            jRBInactivos.setSelected(false);
            for (Dieta dieta : dD.listarTodasLasDietas()) {
                if(!dieta.finalizado()){
                    Paciente pProgreso = pD.buscarPacienteXID(dieta.getPaciente().getIdPaciente());
                    modelo.addRow(new Object[]{pProgreso.getNombre(), pProgreso.getDni(), pProgreso.getTelefono(), "En progreso", dieta.getFechaInicial(), dieta.getFechaFinal(), dieta.getNombre()});
                }
            }
            jLTotal.setText("Total: " + dD.listarTodasLasDietas().size());
        } catch (NullPointerException e) {
        JOptionPane.showMessageDialog(null, "No se pudo cargar la tabla");
        }    
    }//GEN-LAST:event_jRBPacientesPActionPerformed

    private void jBSalirMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSalirMouseEntered
        jBSalir.setBackground(new java.awt.Color(255,0,0));
    }//GEN-LAST:event_jBSalirMouseEntered

    private void jBSalirMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSalirMouseExited
        jBSalir.setBackground(new java.awt.Color(240,240,240));
    }//GEN-LAST:event_jBSalirMouseExited

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jBSalirActionPerformed

    private void jTPInformeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTPInformeMouseClicked
        try {
            if (jRBInactivos.isSelected()) {
                int itemIndex = jTPInforme.getSelectedRow();
                int dniPaciente = (int) jTPInforme.getValueAt(itemIndex, 1);
                if (itemIndex != -1) {
                    pD.reactivarPaciente(pD.buscarPacienteXDNI(dniPaciente).getIdPaciente());
                    modelo.removeRow(itemIndex);
                    JOptionPane.showMessageDialog(null, "Se reactivo al paciente");
                }  
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error de indices");
        }
    }//GEN-LAST:event_jTPInformeMouseClicked

    private void jRBInactivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBInactivosActionPerformed
        jRBPacienteE.setSelected(false);
        jRBPacientesP.setSelected(false);
        jRBPacientesS.setSelected(false);
        try {
            borrarFilas();
            for (Paciente pInactivo :pD.listarPacientesInactivos()) {
                modelo.addRow(new Object[]{pInactivo.getNombre(), pInactivo.getDni(), pInactivo.getTelefono(), "Inactivo", "-----", "-----", "-----"});
            }
            jLTotal.setText("Total: " + pD.listarPacientesInactivos().size());
        } catch (NullPointerException e) {
             System.out.println("Error al cargar los datos de la tabla");
        }
    }//GEN-LAST:event_jRBInactivosActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBSalir;
    private javax.swing.JLabel jLTotal;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jRBInactivos;
    private javax.swing.JRadioButton jRBPacienteE;
    private javax.swing.JRadioButton jRBPacientesP;
    private javax.swing.JRadioButton jRBPacientesS;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTPInforme;
    // End of variables declaration//GEN-END:variables
}
